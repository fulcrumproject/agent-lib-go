// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package stdagent

import (
	"github.com/fulcrumproject/agent-lib-go/pkg/agent"
	mock "github.com/stretchr/testify/mock"
)

// NewMockFulcrumClient creates a new instance of MockFulcrumClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFulcrumClient[P any, C any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFulcrumClient[P, C] {
	mock := &MockFulcrumClient[P, C]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFulcrumClient is an autogenerated mock type for the FulcrumClient type
type MockFulcrumClient[P any, C any] struct {
	mock.Mock
}

type MockFulcrumClient_Expecter[P any, C any] struct {
	mock *mock.Mock
}

func (_m *MockFulcrumClient[P, C]) EXPECT() *MockFulcrumClient_Expecter[P, C] {
	return &MockFulcrumClient_Expecter[P, C]{mock: &_m.Mock}
}

// ClaimJob provides a mock function for the type MockFulcrumClient
func (_mock *MockFulcrumClient[P, C]) ClaimJob(jobID string) error {
	ret := _mock.Called(jobID)

	if len(ret) == 0 {
		panic("no return value specified for ClaimJob")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(jobID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFulcrumClient_ClaimJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClaimJob'
type MockFulcrumClient_ClaimJob_Call[P any, C any] struct {
	*mock.Call
}

// ClaimJob is a helper method to define mock.On call
//   - jobID string
func (_e *MockFulcrumClient_Expecter[P, C]) ClaimJob(jobID interface{}) *MockFulcrumClient_ClaimJob_Call[P, C] {
	return &MockFulcrumClient_ClaimJob_Call[P, C]{Call: _e.mock.On("ClaimJob", jobID)}
}

func (_c *MockFulcrumClient_ClaimJob_Call[P, C]) Run(run func(jobID string)) *MockFulcrumClient_ClaimJob_Call[P, C] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFulcrumClient_ClaimJob_Call[P, C]) Return(err error) *MockFulcrumClient_ClaimJob_Call[P, C] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFulcrumClient_ClaimJob_Call[P, C]) RunAndReturn(run func(jobID string) error) *MockFulcrumClient_ClaimJob_Call[P, C] {
	_c.Call.Return(run)
	return _c
}

// CompleteJob provides a mock function for the type MockFulcrumClient
func (_mock *MockFulcrumClient[P, C]) CompleteJob(jobID string, resources any) error {
	ret := _mock.Called(jobID, resources)

	if len(ret) == 0 {
		panic("no return value specified for CompleteJob")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, any) error); ok {
		r0 = returnFunc(jobID, resources)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFulcrumClient_CompleteJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompleteJob'
type MockFulcrumClient_CompleteJob_Call[P any, C any] struct {
	*mock.Call
}

// CompleteJob is a helper method to define mock.On call
//   - jobID string
//   - resources any
func (_e *MockFulcrumClient_Expecter[P, C]) CompleteJob(jobID interface{}, resources interface{}) *MockFulcrumClient_CompleteJob_Call[P, C] {
	return &MockFulcrumClient_CompleteJob_Call[P, C]{Call: _e.mock.On("CompleteJob", jobID, resources)}
}

func (_c *MockFulcrumClient_CompleteJob_Call[P, C]) Run(run func(jobID string, resources any)) *MockFulcrumClient_CompleteJob_Call[P, C] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 any
		if args[1] != nil {
			arg1 = args[1].(any)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFulcrumClient_CompleteJob_Call[P, C]) Return(err error) *MockFulcrumClient_CompleteJob_Call[P, C] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFulcrumClient_CompleteJob_Call[P, C]) RunAndReturn(run func(jobID string, resources any) error) *MockFulcrumClient_CompleteJob_Call[P, C] {
	_c.Call.Return(run)
	return _c
}

// FailJob provides a mock function for the type MockFulcrumClient
func (_mock *MockFulcrumClient[P, C]) FailJob(jobID string, errorMessage string) error {
	ret := _mock.Called(jobID, errorMessage)

	if len(ret) == 0 {
		panic("no return value specified for FailJob")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(jobID, errorMessage)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFulcrumClient_FailJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FailJob'
type MockFulcrumClient_FailJob_Call[P any, C any] struct {
	*mock.Call
}

// FailJob is a helper method to define mock.On call
//   - jobID string
//   - errorMessage string
func (_e *MockFulcrumClient_Expecter[P, C]) FailJob(jobID interface{}, errorMessage interface{}) *MockFulcrumClient_FailJob_Call[P, C] {
	return &MockFulcrumClient_FailJob_Call[P, C]{Call: _e.mock.On("FailJob", jobID, errorMessage)}
}

func (_c *MockFulcrumClient_FailJob_Call[P, C]) Run(run func(jobID string, errorMessage string)) *MockFulcrumClient_FailJob_Call[P, C] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFulcrumClient_FailJob_Call[P, C]) Return(err error) *MockFulcrumClient_FailJob_Call[P, C] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFulcrumClient_FailJob_Call[P, C]) RunAndReturn(run func(jobID string, errorMessage string) error) *MockFulcrumClient_FailJob_Call[P, C] {
	_c.Call.Return(run)
	return _c
}

// GetAgentInfo provides a mock function for the type MockFulcrumClient
func (_mock *MockFulcrumClient[P, C]) GetAgentInfo() (*agent.AgentInfo[C], error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAgentInfo")
	}

	var r0 *agent.AgentInfo[C]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*agent.AgentInfo[C], error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *agent.AgentInfo[C]); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*agent.AgentInfo[C])
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFulcrumClient_GetAgentInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAgentInfo'
type MockFulcrumClient_GetAgentInfo_Call[P any, C any] struct {
	*mock.Call
}

// GetAgentInfo is a helper method to define mock.On call
func (_e *MockFulcrumClient_Expecter[P, C]) GetAgentInfo() *MockFulcrumClient_GetAgentInfo_Call[P, C] {
	return &MockFulcrumClient_GetAgentInfo_Call[P, C]{Call: _e.mock.On("GetAgentInfo")}
}

func (_c *MockFulcrumClient_GetAgentInfo_Call[P, C]) Run(run func()) *MockFulcrumClient_GetAgentInfo_Call[P, C] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFulcrumClient_GetAgentInfo_Call[P, C]) Return(agentInfo *agent.AgentInfo[C], err error) *MockFulcrumClient_GetAgentInfo_Call[P, C] {
	_c.Call.Return(agentInfo, err)
	return _c
}

func (_c *MockFulcrumClient_GetAgentInfo_Call[P, C]) RunAndReturn(run func() (*agent.AgentInfo[C], error)) *MockFulcrumClient_GetAgentInfo_Call[P, C] {
	_c.Call.Return(run)
	return _c
}

// GetPendingJobs provides a mock function for the type MockFulcrumClient
func (_mock *MockFulcrumClient[P, C]) GetPendingJobs() ([]*agent.Job[P], error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPendingJobs")
	}

	var r0 []*agent.Job[P]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]*agent.Job[P], error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []*agent.Job[P]); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*agent.Job[P])
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFulcrumClient_GetPendingJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPendingJobs'
type MockFulcrumClient_GetPendingJobs_Call[P any, C any] struct {
	*mock.Call
}

// GetPendingJobs is a helper method to define mock.On call
func (_e *MockFulcrumClient_Expecter[P, C]) GetPendingJobs() *MockFulcrumClient_GetPendingJobs_Call[P, C] {
	return &MockFulcrumClient_GetPendingJobs_Call[P, C]{Call: _e.mock.On("GetPendingJobs")}
}

func (_c *MockFulcrumClient_GetPendingJobs_Call[P, C]) Run(run func()) *MockFulcrumClient_GetPendingJobs_Call[P, C] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFulcrumClient_GetPendingJobs_Call[P, C]) Return(jobs []*agent.Job[P], err error) *MockFulcrumClient_GetPendingJobs_Call[P, C] {
	_c.Call.Return(jobs, err)
	return _c
}

func (_c *MockFulcrumClient_GetPendingJobs_Call[P, C]) RunAndReturn(run func() ([]*agent.Job[P], error)) *MockFulcrumClient_GetPendingJobs_Call[P, C] {
	_c.Call.Return(run)
	return _c
}

// ReportMetric provides a mock function for the type MockFulcrumClient
func (_mock *MockFulcrumClient[P, C]) ReportMetric(metrics *agent.MetricEntry) error {
	ret := _mock.Called(metrics)

	if len(ret) == 0 {
		panic("no return value specified for ReportMetric")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*agent.MetricEntry) error); ok {
		r0 = returnFunc(metrics)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFulcrumClient_ReportMetric_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReportMetric'
type MockFulcrumClient_ReportMetric_Call[P any, C any] struct {
	*mock.Call
}

// ReportMetric is a helper method to define mock.On call
//   - metrics *agent.MetricEntry
func (_e *MockFulcrumClient_Expecter[P, C]) ReportMetric(metrics interface{}) *MockFulcrumClient_ReportMetric_Call[P, C] {
	return &MockFulcrumClient_ReportMetric_Call[P, C]{Call: _e.mock.On("ReportMetric", metrics)}
}

func (_c *MockFulcrumClient_ReportMetric_Call[P, C]) Run(run func(metrics *agent.MetricEntry)) *MockFulcrumClient_ReportMetric_Call[P, C] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *agent.MetricEntry
		if args[0] != nil {
			arg0 = args[0].(*agent.MetricEntry)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFulcrumClient_ReportMetric_Call[P, C]) Return(err error) *MockFulcrumClient_ReportMetric_Call[P, C] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFulcrumClient_ReportMetric_Call[P, C]) RunAndReturn(run func(metrics *agent.MetricEntry) error) *MockFulcrumClient_ReportMetric_Call[P, C] {
	_c.Call.Return(run)
	return _c
}

// UpdateAgentStatus provides a mock function for the type MockFulcrumClient
func (_mock *MockFulcrumClient[P, C]) UpdateAgentStatus(status agent.AgentStatus) error {
	ret := _mock.Called(status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAgentStatus")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(agent.AgentStatus) error); ok {
		r0 = returnFunc(status)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFulcrumClient_UpdateAgentStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAgentStatus'
type MockFulcrumClient_UpdateAgentStatus_Call[P any, C any] struct {
	*mock.Call
}

// UpdateAgentStatus is a helper method to define mock.On call
//   - status agent.AgentStatus
func (_e *MockFulcrumClient_Expecter[P, C]) UpdateAgentStatus(status interface{}) *MockFulcrumClient_UpdateAgentStatus_Call[P, C] {
	return &MockFulcrumClient_UpdateAgentStatus_Call[P, C]{Call: _e.mock.On("UpdateAgentStatus", status)}
}

func (_c *MockFulcrumClient_UpdateAgentStatus_Call[P, C]) Run(run func(status agent.AgentStatus)) *MockFulcrumClient_UpdateAgentStatus_Call[P, C] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 agent.AgentStatus
		if args[0] != nil {
			arg0 = args[0].(agent.AgentStatus)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFulcrumClient_UpdateAgentStatus_Call[P, C]) Return(err error) *MockFulcrumClient_UpdateAgentStatus_Call[P, C] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFulcrumClient_UpdateAgentStatus_Call[P, C]) RunAndReturn(run func(status agent.AgentStatus) error) *MockFulcrumClient_UpdateAgentStatus_Call[P, C] {
	_c.Call.Return(run)
	return _c
}
